/*
 *  Panther is a program to encode your media files from one format to the other.
 *  Copyright (C) 2012  Sankha Narayan Guria
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
package sngforge.panther.modules.reducesize;

import it.sauronsoftware.jave.AudioAttributes;
import it.sauronsoftware.jave.Encoder;
import it.sauronsoftware.jave.EncodingAttributes;
import java.awt.Desktop;
import java.io.File;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.SwingWorker;
import sngforge.panther.Globals;
import sngforge.panther.gui.ReportPanel;
import sngforge.panther.modules.EncoderListener;
import sngforge.panther.modules.ID3TagCopier;
import sngforge.panther.modules.WorkingPanel;

public class ReduceSizeWorkingPanel extends WorkingPanel{

    ReduceSizeWorkingPanel rswp=(ReduceSizeWorkingPanel)Globals.wp;
    SwingWorker sw;
    /** Creates new form ReduceSizeWorkingPanel */
    public ReduceSizeWorkingPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        currProgress = new javax.swing.JProgressBar();
        jLabel3 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        overallProgress = new javax.swing.JProgressBar();
        cancel = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        currFile = new javax.swing.JLabel();

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sngforge/panther/resources/applications-system.png"))); // NOI18N
        jLabel1.setText("Please wait while Panther encodes the selected files to the desired bitrate. This may take several minutes.");

        jLabel2.setText("Current Progress");

        jLabel3.setText("Overall Progress");

        cancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sngforge/panther/resources/process-stop.png"))); // NOI18N
        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        jLabel4.setText("Encoding file:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(currProgress, javax.swing.GroupLayout.DEFAULT_SIZE, 545, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE))
                    .addComponent(overallProgress, javax.swing.GroupLayout.DEFAULT_SIZE, 545, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE))
                    .addComponent(cancel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(currFile)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(currProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(overallProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(currFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                .addComponent(cancel)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        int choice=JOptionPane.showConfirmDialog(this, "Are you sure you want to cancel?", "Panther", JOptionPane.YES_NO_OPTION);
                if(choice==JOptionPane.YES_OPTION){
                    jLabel2.setText("Cancelling...");
                    currProgress.setIndeterminate(true);
                    cancel.setEnabled(false);
                    sw.cancel(true);
                    Globals.cancelled=true;
                }
    }//GEN-LAST:event_cancelActionPerformed

    /*
     * upadtes the progress bar on screen
     */
    @Override
    public void setProgress(int val){
        currProgress.setValue(val);
    }

    /*
     * starts the encoding process to reduce the file size using the stored settings
     */
    public void process(){
        rswp=this;
        Globals.cancelled=false;
        Globals.errorList=new java.util.ArrayList();
        Globals.report="The following tasks were completed successfully:\n\n\n";
        Globals.rp=new ReportPanel();
        Globals.tmp=new JScrollPane(Globals.rp);
                sw=new SwingWorker(){
                protected Object doInBackground(){
                    ReduceSizeEntry ee=(ReduceSizeEntry)Globals.ee;
                    for(int i=0;i<ee.files.length;i++){
                        if(!Globals.cancelled){
                        File f=new File((String)ee.files[i]);
                        File fout=new File(ee.outFolder+System.getProperty("file.separator")+f.getName());
                        Encoder e=new Encoder();
                        AudioAttributes aa=new AudioAttributes();
                        aa.setBitRate(ee.bitrate*1000);
                        EncodingAttributes ae=new EncodingAttributes();
                        ae.setFormat("mp3");
                        ae.setAudioAttributes(aa);
                        EncoderListener rsl=new EncoderListener();
                        rsl.setParent(rswp);
                        try{
                            currFile.setText(f.getName());
                            e.encode(f, fout, ae, rsl);
                            if(ee.copyTags)
                                ID3TagCopier.copyTags(f.getAbsolutePath(),fout.getAbsolutePath());
                            Globals.report=Globals.report+"Input:"+f.getAbsolutePath()+"\nOutput:"+fout.getAbsolutePath()+"\nEncoded Successfully!\n\n";
                            overallProgress.setValue((i+1)*100/ee.files.length);
                        }catch(Exception ex){
                            System.err.println(ex);
                            Globals.errorList.add(ex);
                        }
                        }else
                            break;
                }
                    if(ee.openFolder){
                        try{
                        Desktop.getDesktop().open(new File(ee.outFolder));
                }catch(Exception e){
                    System.err.println(e);
                }}
                    Globals.report=Globals.report+"\nErrors:\n\n\n";
                    if(!Globals.errorList.isEmpty()){
                        for(int i=0;i<Globals.errorList.size();i++)
                        Globals.report=Globals.report+(Exception)Globals.errorList.get(i);
                    }
                    Globals.mainFrame.setVisible(false);
                    Globals.mainFrame.remove(Globals.scrollPane);
                    Globals.rp.populateReport();
                    Globals.mainFrame.add(Globals.tmp);
                    Globals.mainFrame.setVisible(true);
                    return null;
                }
            };
            sw.execute();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancel;
    private javax.swing.JLabel currFile;
    private javax.swing.JProgressBar currProgress;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JProgressBar overallProgress;
    // End of variables declaration//GEN-END:variables

}
